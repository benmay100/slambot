#!/usr/bin/env python3
"""
Launch file to run the map_saver_cli node.

This launch file provides a convenient way to save the map generated by a SLAM node
directly into the 'maps' directory of the slambot_slam package. It listens to a
namespaced map topic for multi-robot compatibility.
"""
import os

from ament_index_python.packages import get_package_share_directory
from launch import LaunchDescription
from launch.actions import DeclareLaunchArgument
from launch.substitutions import LaunchConfiguration, PathJoinSubstitution
from launch_ros.actions import Node

def generate_launch_description():
    """Generate the launch description to save the map."""

    # Get the path to the slambot_slam package's share directory
    pkg_slambot_slam = get_package_share_directory('slambot_slam')

    # --- Declare Launch Arguments ---
    declare_map_name_cmd = DeclareLaunchArgument(
        'map_name',
        default_value='saved_map',
        description='The name of the map file to save (without extension)'
    )

    # This argument allows us to specify which robot's map to save
    declare_robot_name_cmd = DeclareLaunchArgument(
        'robot_name',
        default_value='slambot',
        description='The namespace of the robot to save the map from'
    )

    # Construct the full path where the map file will be saved
    map_file_path = PathJoinSubstitution([
        pkg_slambot_slam,
        'maps',
        LaunchConfiguration('map_name')
    ])

    # --- Map Saver Node ---
    # This node runs the map_saver_cli tool from the nav2_map_server package
    save_map_node = Node(
        package='nav2_map_server',
        executable='map_saver_cli',
        output='screen',
        arguments=[
            # Construct the namespaced topic, e.g., '/slambot/map'
            '-t', [LaunchConfiguration('robot_name'), '/map'],
            '-f', map_file_path
        ],
        parameters=[{'use_sim_time': True}] # Important for simulation environments
    )

    # --- Create Launch Description ---
    ld = LaunchDescription()

    # Add the declared arguments and the node to the launch description
    ld.add_action(declare_map_name_cmd)
    ld.add_action(declare_robot_name_cmd)
    ld.add_action(save_map_node)

    return ld

